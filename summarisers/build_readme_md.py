"""Build the markdown for README-AI.md
"""
import glob
from tools import read_json, md_link, write_text, desplopify
from readme_tools import FILE_README_PATTERN, README_PATH

def build_markdown(combined_critique, file_summaries):
    """Build the markdown for the summary
    combined_critique: Overall critique. See assemble_critiques.py
    file_summaries:  File summaries. See file_readme.py
    """
    lines = [
        "# Advent of Code 2024 Solutions\n\n",
        f"""This repository contains Python solutions for the Advent of Code 2024 challenges.
           Below is a brief description of each day's problem and solution.\n\n"""
        f"""This docuement generated by the [readme.py](summarisers/readme.py) script.
        {len(file_summaries)} Python solutions were analysed.\n\n""",
    ]

    def add(line): lines.append(line)

    file_summaries.sort(key=lambda critique: critique['Day'])
    for summary in file_summaries:
        add(f"### Day {summary['Day']}: {summary['Title']} ({md_link(summary['Name'])})\n")
        add(f"- **Problem 1**: {summary['Problem1']}\n")
        add(f"- **Problem 2**: {summary['Problem2']}\n")
        add(f"- **Solution 1**: {summary['Solution1']}\n")
        add(f"- **Solution 2**: {summary['Solution2']}\n\n")

    return ''.join(lines)

def file_summary_(path):
    critique = read_json(path)

    assert 'Name' in critique, f"Name not found in {path}"
    assert 'Day' in critique, f"Day not found in {path}"
    if not critique['Name'].endswith('.py'): critique['Name'] += '.py'

    return critique

def build_readme_markdown():
    overall_critique = None
    file_summaries = [file_summary_(filename) for filename in sglob(FILE_README_PATTERN)]
    readme_md = build_markdown(overall_critique, file_summaries)
    readme_md = desplopify(readme_md)
    write_text(README_PATH, readme_md)
    print(f"{README_PATH} file created.")

if __name__ == '__main__':
    build_readme_markdown()
