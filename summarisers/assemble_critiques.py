"""
    Assemble file critiques into a comprehensive analysis of programmer patterns.
    This script combines the critiques of multiple Python solutions for Advent of Code 2024
    into a single analysis that identifies patterns, strengths, and areas for growth.
    The analysis is generated by calling the Anthropics API to analyze the critiques.
    The combined analysis is saved as a JSON file for further processing and review.
"""

import glob
import json
import os
from typing import List, Dict
from pydantic import BaseModel
from tools import call_anthropics_claude, day_number, read_json, write_text
from critique_tools import OVERALL_CRITIQUE_PATH, FILE_CRITIQUE_PATTERN

class AOCCombineCritiquesModel(BaseModel):
    """Model for the combined analysis of multiple Python solutions for Advent of Code 2024."""
    Score: int
    Overall: str
    Strengths: List[str]
    Weaknesses: List[str]
    Issues: List[str]
    DevelopmentAreas: List[str]


COMBINE_ANALYSIS = {
    "Strengths": [
        "Biggest strength in solving the advent of code problems, if any",
        "2nd biggest strength in solving the advent of code problems, if any",
        "3rd biggest strength in solving the advent of code problems, if any",
    ],
    "Weaknesses": [
        "Biggest weakness in solving the advent of code problems, if any",
        "2nd biggest weakness in solving the advent of code problems, if any",
        "3rd biggest weakness in solving the advent of code problems, if any"
    ],
    "Issues": [
       "Worst function in terms of correctness, efficiency, duplication, or fragility, if any",
        "2nd worst function in terms of correctness, efficiency, duplication, or fragility, if any",
        "3rd worst function in terms of correctness, efficiency, duplication, or fragility, if any"
    ],
    "DevelopmentAreas": [
       "Biggest area for growth in terms of coding practices, if any",
        "2nd biggest area for growth in terms of coding practices, if any",
        "3rd biggest area for growth in terms of coding practices, if any"
    ],
    "Overall": "Overall performance of the Python files at solving the problems and how well they address the problems, how easy they are to understand and extend.",

    "Score": 2,

}

COMBINE_PROMPT = """
    You are an Advent of Code critic.
    You have recently rated {len(file_analyses)} python files and those rating summaries are below.
    You now need to the developer's coding patterns the overall performance in all the Python files
    and list

    1. The main strengths
    2. The main weaknesses.
    3. The functions that are inefficient or have duplicate or fragile code or have other issues. Be sure  to list the function names these issue occur in in the 'Issues' section. These can be copied from the individual file analyses.
    4. A broad description of the overall performance of the Python files at solving the problems. How well they address the problens, how easy they are to understand and extend.
    5. Overall skill level on a scale of 1 to 10 where 1 is beginner level, 5 is an average solution and 10 is the top of Advent of Code solutions.
    6. Recommendations for growth.

    Format the response as JSON with these sections, providing specific examples where possible.
    The JSON you output should have the following format:
    {COMBINE_ANALYSIS}

"""

def analyze_programmer_patterns(file_analyses: List[Dict]) -> dict:
    """ Analyzes multiple Python file assessments to identify programmer patterns.
        `file_analyses` is a list of analysis results for multiple Python solutions to
        Advent of Code problems.
        Returns: Comprehensive analysis of programmer patterns as a dictionary.
    """
    # Extract individual analysis data.
    analysis_data = []
    for path in file_analyses:
        data = read_json(path)
        day = day_number(path)
        data["File"] = path
        data["Title"] = f"Analysis of Day {day}"
        analysis_data.append(data)

    user_message = f"""
    Please analyze this programmer's patterns based on analyses of {len(file_analyses)} Python files.

    Here is the aggregated data:
    ```
    {json.dumps(analysis_data, indent=2)}
    ```

    Provide a comprehensive assessment in JSON format focusing on how well the solutions address the
    problems, the strengths and weaknesses of the solutions and areas for growth.
    Remember the keys in the JSON should be {list(COMBINE_ANALYSIS.keys())}.
    """

    return call_anthropics_claude(COMBINE_PROMPT, user_message)

def combine_critiques(force=False):
    """Combine the critiques of multiple Python solutions for Advent of Code 2024."""
    if not force and os.path.exists(OVERALL_CRITIQUE_PATH):
        print(f"Combined analysis already exists at {OVERALL_CRITIQUE_PATH}")
        return
    file_analyses = sorted(glob.glob(FILE_CRITIQUE_PATTERN))
    analysis = analyze_programmer_patterns(file_analyses)
    combined = AOCCombineCritiquesModel(**analysis)
    write_text(OVERALL_CRITIQUE_PATH, combined.model_dump_json(indent=2))
    print(f"Combined analysis saved to {OVERALL_CRITIQUE_PATH}")

if __name__ == '__main__':
    combine_critiques(force=True)
