"""Build the markdown for CRITIQUE.md
"""
import glob
from functools import partial
from tools import read_json, md_link, md_numbered_list, md_bulleted_list, desplopify
from critique_tools import OVERALL_CRITIQUE_PATH, FILE_CRITIQUE_PATTERN, CRITIQUE_PATH

def build_markdown(combined_critique, file_critiques, show_problems=False):
    """Build the markdown for the critique
    combined_critique: dict: Overall critique. See assemble_critiques.py
    file_critiques: list of dict: File critiques. See file_critiques.py
    """
    lines = [
        "# Advent of Code 2024 Python Solutions Critique\n\n",
        f"""This document provides a critique of the Python solutions for Advent of Code 2024.
            It was generated by the [critique.py](summarisers/critique.py) script.\n\n""",
        f"{len(file_critiques)} Python solutions were analysed.\n\n",
    ]

    def add(line): lines.append(line)
    numbered_list = partial(md_numbered_list, add)
    bulleted_list = partial(md_bulleted_list, add)

    lines.append("## Overall\n\n")
    add(f"_{combined_critique['Overall']}_\n\n")
    add(f"**Overall Score**: {combined_critique['Score']}/10\n\n")
    numbered_list("Main Strength", combined_critique['Strengths'])
    numbered_list("Main Weaknesses", combined_critique['Weaknesses'])
    numbered_list("Main Issues", combined_critique['Issues'])
    numbered_list("Areas for Improvement", combined_critique['DevelopmentAreas'])

    add("## Files Analyzed\n\n"),

    file_critiques.sort(key=lambda critique: critique['Day'])
    for critique in file_critiques:
        add(f"### Day {critique['Day']}: {md_link(critique['Name'])}\n\n")
        add(f"**Score**: {critique['Score']}/10\n\n")
        if show_problems:
            add(f"**Problem 1**: {critique['Problem1']}\n\n")
            add(f"**Problem 2**: {critique['Problem2']}\n\n")
            add(f"**Solution 1**: {critique['Solution1']}\n\n")
            add(f"**Solution 2**: {critique['Solution2']}\n\n")
        bulleted_list("Strengths", critique['Strengths'])
        bulleted_list("Weaknesses", critique['Weaknesses'])
        bulleted_list("Issues", critique['Issues'])

    return ''.join(lines)

def file_critique_(path):
    critique = read_json(path)

    assert 'Name' in critique, f"Name not found in {path}"
    assert 'Day' in critique, f"Day not found in {path}"
    if not critique['Name'].endswith('.py'): critique['Name'] += '.py'

    return critique

def build_critique_markdown():
    overall_critique = read_json(OVERALL_CRITIQUE_PATH)
    file_paths = sorted(glob.glob(FILE_CRITIQUE_PATTERN))
    file_critiques = [file_critique_(filename) for filename in file_paths]
    critique_md = build_markdown(overall_critique, file_critiques)
    critique_md = desplopify(critique_md)
    with open(CRITIQUE_PATH, 'w') as f: f.write(critique_md)
    print(f"{CRITIQUE_PATH} file created.")

if __name__ == '__main__':
    build_critique_markdown()

